queries:
  - name: get_current_time
    sql: "SELECT NOW() as current_time"
    description: "Get the current timestamp"
    module: "admin"
    expect: "exactly_one"

  - name: get_version
    sql: "SELECT version() as pg_version"
    description: "Get PostgreSQL version"
    module: "admin"
    expect: "exactly_one"

  # PostgreSQL Enum Examples

  - name: create_users_table
    sql: "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE NOT NULL, age INTEGER, profile JSONB, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW())"
    description: "Create the users table with all necessary fields"
    module: "setup"

  - name: insert_user
    sql: |
      INSERT INTO users (name, email, age, profile)
      VALUES (${name}, ${email}, ${age}, ${profile})
      RETURNING id, name, email, age, created_at
    description: "Insert a new user with all fields and return the created user"
    module: "users"
    expect: "exactly_one"

  - name: get_all_users
    sql: "SELECT id, name, email, age, profile, created_at, updated_at FROM users ORDER BY created_at DESC"
    description: "Get all users with all their fields"
    module: "users"
    expect: "multiple"

  - name: find_user_by_email
    sql: "SELECT id, name, email, age, profile, created_at, updated_at FROM users WHERE email = ${email}"
    description: "Find a user by their email address"
    module: "users"
    expect: "possible_one"

  - name: update_user_profile
    sql: "UPDATE users SET profile = ${profile}, updated_at = NOW() WHERE id = ${user_id} RETURNING id, name, email, age, profile, updated_at"
    description: "Update a user's profile by their ID"
    module: "users"
    expect: "exactly_one"

  - name: find_users_by_name_and_age
    sql: "SELECT id, name, email, age FROM users WHERE name ILIKE ${name_pattern} AND (${min_age?}::integer IS NULL OR age >= ${min_age?})"
    description: "Find users by name pattern with optional minimum age filter"
    module: "users"
    expect: "multiple"

  - name: get_recent_users
    sql: "SELECT id, name, email, age, profile, created_at, updated_at FROM users WHERE created_at > ${since} ORDER BY created_at DESC"
    description: "Get users created after a specific timestamp - expects at least one user"
    module: "users"
    expect: "at_least_one"

  - name: get_active_users_by_age_range
    sql: "SELECT id, name, email, age, profile, created_at FROM users WHERE age BETWEEN ${min_age} AND ${max_age} AND updated_at > NOW() - INTERVAL '30 days'"
    description: "Get active users within an age range - must return at least one user or fails"
    module: "users"
    expect: "at_least_one"

  - name: search_users_by_name_pattern
    sql: "SELECT id, name, email FROM users WHERE name ILIKE ${pattern} ORDER BY name"
    description: "Search users by name pattern - expects at least one match"
    module: "users"
    expect: "at_least_one"

  # PostgreSQL Enum Examples
  - name: get_users_by_status
    sql: "SELECT id, name, email, status FROM users WHERE status = ${user_status} ORDER BY name"
    description: "Get users by their status (enum parameter and enum output)"
    module: "users"
    expect: "multiple"

  - name: update_user_status
    sql: "UPDATE users SET status = ${new_status} WHERE id = ${user_id} RETURNING id, status"
    description: "Update user status and return the new status"
    module: "users"
    expect: "exactly_one"

  - name: get_all_user_statuses
    sql: "SELECT DISTINCT status FROM users ORDER BY status"
    description: "Get all possible user statuses currently in use"
    module: "users"
    expect: "multiple"

# Field-specific type mappings for JSON/JSONB fields
# This demonstrates how you would map specific fields to custom Rust types
# Schema names can be included: "schema.table.field" or just "table.field"
types:
  "test.test_data": "crate::models::TestData"
  "users.profile": "crate::models::UserProfile"
